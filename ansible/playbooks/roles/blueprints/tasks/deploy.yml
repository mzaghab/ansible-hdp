---

- name: Upload the blueprint file "{{ blueprint_name }}"
  template:
    src: "{{ blueprint_name }}.j2"
    dest: "/tmp/{{ blueprint_name }}"
    mode: 0640
    force: yes

- name: Delete any existing blueprint called {{ blueprint_name }}
  uri:
    url: "http://{{ ambari.host }}:{{ ambari.port }}/api/v1/blueprints/{{ blueprint_name }}"
    method: DELETE
    force_basic_auth: yes
    user: "{{ ambari.user }}"
    password: "{{ ambari.password }}"
    headers: '{"X-Requested-By":"ambari"}'
    status_code: 200,201,202,404
    return_content: no

- name: Slurp the blueprint
  slurp:
    src: "/tmp/{{ blueprint_name }}"
  register: cluster_blueprint

- name: Register the blueprint with the Ambari server
  uri:
    url: "http://{{ ambari.host }}:{{ ambari.port }}/api/v1/blueprints/{{ blueprint_name }}"
    method: POST
    force_basic_auth: yes
    user: "{{ ambari.user }}"
    password: "{{ ambari.password }}"
    headers: '{"X-Requested-By":"ambari"}'
    body: " {{ cluster_blueprint.content | b64decode }}"
    body_format: raw
    status_code: 200,201,202,404
    return_content: no

- name: Check if a cluster {{ cluster_name }} already exists
  uri:
    url: "http://{{ ambari.host }}:{{ ambari.port }}/api/v1/clusters/{{ cluster_name }}"
    method: GET
    force_basic_auth: yes
    user: "{{ ambari.user }}"
    password: "{{ ambari.password }}"
    headers: '{"X-Requested-By":"ambari"}'
    status_code: 200,201,202,404
  register: cluster_check

- name: Fail if a cluster {{ cluster_name }} already exists
  fail:
    msg: Cluster {{ cluster_name }} already exists!
  when: cluster_check.status!=404

- name: Upload the cluster template file 
  template:
    src: "cluster_template.j2"
    dest: "/tmp/cluster_template"
    mode: 0640
    force: yes

- name: Slurp the cluster creation template
  slurp:
    src: '/tmp/cluster_template'
  register: cluster_template

- name: Launch the create cluster request
  uri:
    url: http://{{ ambari.host }}:{{ ambari.port }}/api/v1/clusters/{{ cluster_name }}
    method: POST
    force_basic_auth: yes
    user: "{{ ambari.user }}"
    password: "{{ ambari.password }}"
    headers: '{"X-Requested-By":"ambari"}'
    body: " {{ cluster_template.content | b64decode }}"
    body_format: raw
    status_code: 200,201,202
    return_content: yes
  register: cluster_create_task

#- name: Change Ambari admin user password
#  uri: url=http://{{ ansible_fqdn }}:{{ ambari.port }}/api/v1/users/admin
#       method=PUT
#       force_basic_auth=yes
#       user=admin
#       password=admin
#       HEADER_X-Requested-By="ambari"
#       body=' {"Users":{ "password":"{{ admin_password }}", "old_password":"admin"}}'
#       body_format=raw
#       status_code=200,201,202
#  when: admin_password != 'admin'